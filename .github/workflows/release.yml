name: New Nextcloud release

on:
  release:
    types: [published]

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout config
        uses: actions/checkout@v4

      - name: Generate matrix
        id: matrix
        run: |
          REPOS=$(cat "stable26.json" | jq -c)
          echo "matrix=$REPOS" >> $GITHUB_OUTPUT

  fetch-and-build:
    needs: init
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.apps) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.apps.repo}}
          ref: ${{ matrix.apps.branch}}

      - name: Check composer file existence
        id: check_composer
        uses: andstor/file-existence-action@v3
        with:
          files: composer.json

      - name: Set up dependencies
        if: steps.check_composer.outputs.files_exists == 'true'
        run: composer i --no-dev

      - name: Check npm file existence
        id: check_npm
        uses: andstor/file-existence-action@v3
        with:
          files: package.json

      - name: Read package.json node and npm engines version
        if: steps.check_npm.outputs.files_exists == 'true'
        uses: skjnldsv/read-package-engines-version-actions@v3
        id: versions
        with:
          fallbackNode: '^16'
          fallbackNpm: '^8'

      - name: Set up node ${{ steps.versions.outputs.nodeVersion }}
        if: steps.check_npm.outputs.files_exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.versions.outputs.nodeVersion }}

      - name: Set up npm ${{ steps.versions.outputs.npmVersion }}
        if: steps.check_npm.outputs.files_exists == 'true'
        run: npm i -g npm@"${{ steps.versions.outputs.npmVersion }}"

      - name: Install dependencies & build
        if: steps.check_npm.outputs.files_exists == 'true'
        run: |
          npm ci
          npm run build --if-present

      - name: Process .nextcloudignore file
        run: |
          if [ -f ".nextcloudignore" ]; then
            echo "Processing .nextcloudignore file..."
            # Read each line from .nextcloudignore and remove matching files/directories
            while IFS= read -r pattern || [[ -n "$pattern" ]]; do
              # Skip empty lines and comments
              [[ -z "$pattern" || "$pattern" =~ ^[[:space:]]*# ]] && continue
              
              echo "Removing files matching pattern: $pattern"
              # Use find with -delete for safe removal, handle both files and directories
              find . -path "./$pattern" -delete 2>/dev/null || true
              # Also try glob pattern matching for shell patterns
              rm -rf $pattern 2>/dev/null || true
            done < .nextcloudignore
            
            echo "Finished processing .nextcloudignore"
          else
            echo "No .nextcloudignore file found"
          fi
      
      - name: Compress artifact
        run: |
          rm -rf .git
          tar -cf /tmp/${{ matrix.apps.id}}.tar .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.apps.id}}
          path: /tmp/${{ matrix.apps.id}}.tar
  
  assemble:
    needs: fetch-and-build
    runs-on: ubuntu-latest

    steps:
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
      
      - name: Install dependencies
        run: sudo apt-get install -y lbzip2
      
      - name: Decompress server
        run: |
          mkdir -p /tmp/server
          tar -xf server/server.tar --directory /tmp/server
          rm -rf server

      - name: Decompress apps
        run: |
          echo "Available artifacts:"
          ls -lah ./
          
          # Create apps directory if it doesn't exist
          mkdir -p /tmp/server/apps
          
          # Process each app directory (excluding server which we already processed)
          for app_dir in */; do
            app_name=$(basename "$app_dir")
            if [ "$app_name" != "server" ]; then
              echo "Processing app: $app_name"
              
              # Find and extract the tar file for this app
              if [ -f "$app_dir/$app_name.tar" ]; then
                echo "Extracting $app_name.tar to /tmp/server/apps/$app_name"
                mkdir -p "/tmp/server/apps/$app_name"
                tar -xf "$app_dir/$app_name.tar" --directory "/tmp/server/apps/$app_name"
                rm -f "$app_dir/$app_name.tar"
              else
                echo "Warning: No tar file found for app $app_name"
              fi
            fi
          done
          
          echo "Final apps directory structure:"
          ls -lah /tmp/server/apps/

      - name: Create and compress release
        run: |
          cd /tmp
          tar -I lbzip2 -cf nextcloud.tar.bz2 server/
          ls -lah nextcloud.tar.bz2

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: nextcloud
          path: /tmp/nextcloud.tar.bz2
